# Great! File Upload Works - Now Let's Move Credentials to .env

## Success Confirmed âœ…
You've verified the S3 upload works with hardcoded credentials. Now we need to move those credentials to a `.env` file for security.

## Task: Create .env File and Update All AWS Files

### Step 1: Create .env File in Project Root

Create a file named `.env` in the root directory (same level as `package.json`) with this content:
```properties
# AWS S3 Configuration
AWS_REGION=us-east-1
S3_BUCKET_NAME=insure-it
AWS_ACCESS_KEY_ID=your_access_key_here
AWS_SECRET_ACCESS_KEY=your_secret_key_here

# AWS RDS PostgreSQL Database
DATABASE_URL=postgresql://postgres:0221021wW!!@insure-it.c3r4kl8gzwbf.us-east-1.rds.amazonaws.com:5432/insureit

# Application
NODE_ENV=development
```

**IMPORTANT:** Replace `your_access_key_here` and `your_secret_key_here` with the actual AWS credentials you used in the hardcoded version.

### Step 2: Update .gitignore

Make sure `.gitignore` includes:
```
.env
.env.local
.env.production
```

### Step 3: Update All AWS Files to Use Environment Variables

#### File: `/server/s3Client.ts`
Change from hardcoded credentials to:
```typescript
import { S3Client } from '@aws-sdk/client-s3';

export const s3Client = new S3Client({
  region: process.env.AWS_REGION!,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  },
});

export const S3_BUCKET = process.env.S3_BUCKET_NAME!;
```

#### File: `/server/db.ts`
Change from hardcoded credentials to use `DATABASE_URL`:
```typescript
import { Pool } from 'pg';

export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});
```

#### File: `/server/routes.ts`
If it references the bucket name, make sure it imports from environment:
```typescript
import { S3_BUCKET } from './s3Client';
// or
const bucketName = process.env.S3_BUCKET_NAME!;
```

### Step 4: Verify Environment Variables Are Loaded

Make sure your server entry point (likely `/server/index.ts`) has this at the very top:
```typescript
import dotenv from 'dotenv';
dotenv.config();

// ... rest of imports
```

If `dotenv` package is not installed, run:
```bash
npm install dotenv
```

### Step 5: Remove Hardcoded Credentials

After confirming everything works with `.env`:
1. Remove any hardcoded AWS credentials from `/server/s3Client.ts`
2. Remove hardcoded database password from `/server/db.ts`
3. Search the entire codebase for:
   - `'YOUR_ACTUAL_ACCESS_KEY_ID'`
   - `'YOUR_ACTUAL_SECRET_ACCESS_KEY'`
   - `'0221021wW!!'`
   - Any other hardcoded credentials

Delete or replace them with environment variable references.

## After You Complete These Steps:

1. Restart the server
2. Test the file upload again
3. Confirm it still works
4. Verify no credentials are visible in the code
5. Report back: "Environment variables configured successfully"

## Files That Must Use Environment Variables:
- `/server/s3Client.ts` - AWS S3 credentials and bucket name
- `/server/db.ts` - PostgreSQL database URL
- `/server/routes.ts` - If it references bucket or credentials directly
- Any other file that uses AWS services

Begin now and let me know when it's done.